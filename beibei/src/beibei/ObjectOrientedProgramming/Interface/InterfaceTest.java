package beibei.ObjectOrientedProgramming.Interface;

/**
 * Created by sunyinhui on 16-6-6.
 */

/**
 * 接口有两种意思：
 *      1. 概念性接口，即系统对外提供的所有服务。类的所有能被外部使用者访问的方法构成了类的接口
 *      2. 接口类型，用于明确的描述系统对外提供的所有服务，能够更加清晰地把系统的实现细节与接口分离
 *
 */

/**
 * 接口中的成员变量默认都是public, static, final类型的，必须被显式初始化
 * 接口中的方法默认都是public, abstract类型的
 * 接口中只能包含public,static,final类型的成员变量和public,abstract类型的成员变量
 * 接口中不能定义构造方法，不能实例化，在接口中定义构造函数是非法的
 * 一个接口不能实现另一个接口，但它可以继承多个其他接口
 * 接口必须通过类来实现它的抽象方法
 */

/**
 * 当类实现了某个接口时，它必须实现接口中所有的抽象方法，否则这个类必须被定义为抽象类
 * 不允许创建接口的实例，但允许定义接口类型的引用变量，该变量引用实现了这个接口的类的实例
 * 一个类只能继承一个直接的父类，但能实现多个接口
 */


/**
 *        抽象类 vs 接口
 * 相同点
 *      1. 代表系统的抽象层
 *      2. 都不能被实例化
 *      3. 都包含抽象方法
 *区别
 *      1. 在抽象类中可以为部分方法提供默认的实现，从而避免在子类中重复实现它们，提高代码的可重用性
 *         这是抽象类的优势所在，而接口中只能包含抽象方法。
 *         由于抽象类允许加入具体的方法(即非抽象方法)，因此扩展抽象类的功能，即向抽象类中添加一个具体的方法
 *         不会对它的子类造成影响。而对于接口，一旦接口被公布，就必须非常稳定，因为随意在接口中添加抽象方法，
 *         会影响到所有的实现类，这些实现类要么实现新增的抽象方法，要么声明为抽象类。
 */
public class InterfaceTest {

    int a ;  // 编译出错，必须被显式初始化



}
